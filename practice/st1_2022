import numpy as np

K1 = 0x4A9F


#initial permutation
init_perm1 = [13, 26, 32, 19, 25,  8, 10,  6, 27, 16, 21, 31,  2, 14,  9, 7, 12, 24,  1,  3, 20, 18,  5, 28, 30, 22, 23, 17, 29,  4, 11, 15]
#permuted choice 1
key_perm1 = [4,  3, 13, 12, 10,  7, 14,  6, 15,  2, 11,  9,  5,  1,  8, 16] 
#permuted choice 2
subkeyperm1 = [3, 13,  7,  9,  4,  2, 16, 15, 14, 11, 12, 10,  6,  1,  5,  8] 

def hex_to_binary(he):
    bin_mes = list(bin(int(he,16)))
    bin_list = bin_mes[2:]
    return bin_list

def binary_to_hex(bin_list):
    bin_str =""
    for b in bin_list:
        bin_str+= str(int(b))

    bin_num = int(bin_str,2)
    he = hex(bin_num)
    return he

def permute(message,permute_key,length):
    
    
    
    while len(message)<length:
        message = ['0'] + message
    result = np.empty(length)
    
    for i in range(length):
        #print(permute_key[i]-1)
        result[permute_key[i]-1] = int(message[i])
    return result


def rev_permute(message,permute_key,length):
    
    
    while len(message)<length:
        message = ['0'] + message
    result = np.empty(length)
    
    for i in range(length):
        #print(permute_key[i]-1)
        result[i] = int(message[permute_key[i]-1])
    return result


def circ_shift(number,shift):
    return np.roll(number,shift)

def xor(a,b):
    return a.astype(int)^b.astype(int)

def generate_key(key,rounds,perm1,perm2):
    key_m = hex_to_binary(key)
    permed1 = permute(key_m,perm1,16)
    #print(permed1)
    # generate the keys
    res = []
    for i in range(rounds):
        shifted = circ_shift(permed1,(i+1)*(-2))
        res.append(permute(shifted,perm2,16))

    return res


def encrypt(plaintext,keys,init_perm):
    perm_plain = hex_to_binary(plaintext)
    permed = permute(perm_plain,init_perm,32)

    l = []
    r = []

    left = permed[:16]
    right = permed[16:]
    for i in range(4):
        print(left[0])
        print(right)
        l.append(left)
        r.append(right)
        fed = xor(right,hex_to_binary(keys[i]))
        xored = xor(left,fed)
        left = right
        right = xored
    swapped = right+left

    return rev_permute(swapped,init_perm,32)
x = generate_key(K1,4,key_perm1,subkeyperm1)

plaintext = 0xFA3591E7
sub_keys = []
for r in x:
    sub_keys.append(binary_to_hex(r))
print(sub_keys)
s = encrypt(plaintext,sub_keys,init_perm1)